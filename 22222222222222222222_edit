from PyQt5 import QtCore, QtGui, QtWidgets
from ui import Ui_MainWindow
from PIL import Image, ImageFilter
import os


class ImageEditor(QtWidgets.QMainWindow):
    def __init__(self):
        super().__init__()
        self.ui = Ui_MainWindow()
        self.ui.setupUi(self)
        self.workdir = ""
        self.ui.btn_dir.clicked.connect(self.show_files)
        self.ui.list_files.itemClicked.connect(self.showimage)
        self.ui.btn_bw.clicked.connect(self.do_bw)
        self.ui.btn_right.clicked.connect(self.do_right)
        self.ui.btn_left.clicked.connect(self.do_left)
        self.ui.btn_mirror.clicked.connect(self.do_mirror)
        self.ui.btn_sharp.clicked.connect(self.do_sharp)
        self.ui.btn_contour.clicked.connect(self.do_contour)
        self.ui.btn_detail.clicked.connect(self.do_detail)
        self.ui.btn_blur.clicked.connect(self.do_blur)
        self.ui.btn_smooth.clicked.connect(self.do_smooth)
        self.ui.btn_emboss.clicked.connect(self.do_emboss)
        
    def choose_dir(self):
        self.workdir = QtWidgets.QFileDialog.getExistingDirectory()

    def filter(self, files, extentions):
        result = []
        for file in files:
            for ex in extentions:
                if file.endswith(ex):
                    result.append(file)
        return result
    
    def show_files(self):
        extentions = [".jpg", ".png", ".jpeg", ".gif", ".bmp"]
        self.choose_dir()
        try:
            files = os.listdir(self.workdir)
            files = self.filter(files, extentions)
            self.ui.list_files.clear()
            for file in files:
                self.ui.list_files.addItem(file)
        except:
            win = QtWidgets.QMessageBox()
            win.setText("Шлях до файлів обрано не вірно")
            win.exec()

    def loadimage(self, name):
        self.filename = name
        self.path = os.path.join(self.workdir, self.filename)
        self.image = Image.open(self.path)

    def showimage(self):
        if self.ui.list_files.selectedItems():
            name = self.ui.list_files.selectedItems()[0].text()
            self.loadimage(name)

            pix = QtGui.QPixmap(self.path)
            w, h = self.ui.image.width(), self.ui.image.height()
            pix = pix.scaled(w, h, QtCore.Qt.KeepAspectRatio)
            self.ui.image.setPixmap(pix)

    def show_changed(self):
        self.loadimage("changed.jpg")
        pix = QtGui.QPixmap(self.path)
        w, h = self.ui.image.width(), self.ui.image.height()
        pix = pix.scaled(w, h, QtCore.Qt.KeepAspectRatio)
        self.ui.image.setPixmap(pix)

    def do_bw(self):
        self.image = self.image.convert("L")
        self.saveimage()
        self.show_changed()

    def do_right(self):
        self.image = self.image.transpose(Image.ROTATE_270)
        self.saveimage()
        self.show_changed()

    def do_left(self):
        self.image = self.image.transpose(Image.ROTATE_90)
        self.saveimage()
        self.show_changed()

    def do_mirror(self):
        self.image = self.image.transpose(Image.FLIP_LEFT_RIGHT)
        self.saveimage()
        self.show_changed()

    def do_sharp(self):
        self.image = self.image.filter(ImageFilter.SHARPEN)
        self.saveimage()
        self.show_changed()

    def do_contour(self):
        self.image = self.image.filter(ImageFilter.CONTOUR)
        self.saveimage()
        self.show_changed()

    def do_detail(self):
        self.image = self.image.filter(ImageFilter.DETAIL)
        self.saveimage()
        self.show_changed()

    def do_blur(self):
        self.image = self.image.filter(ImageFilter.BLUR)
        self.saveimage()
        self.show_changed()

    def do_smooth(self):
        self.image = self.image.filter(ImageFilter.SMOOTH)
        self.saveimage()
        self.show_changed()

    def do_emboss(self):
        self.image = self.image.filter(ImageFilter.EMBOSS)
        self.saveimage()
        self.show_changed()

    def saveimage(self):
        self.path = os.path.join(self.workdir, "changed.jpg")
        self.image = self.image.convert("RGB")
        self.image.save(self.path)

app = QtWidgets.QApplication([])
win = ImageEditor()
win.show()
app.exec()
