# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'zamitky.ui'
#
# Created by: PyQt5 UI code generator 5.15.10
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
import json

# notes = {
#     "Ласкаво просимо":{
#         "текст":"Вітаю в супер крутій програмі",
#         "теги": ["тег1", "тег2"]
#     }
# }
# with open("notes.json", "w", encoding="utf-8") as file:
#     json.dump(notes, file)

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.setFixedSize(585, 493)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.text = QtWidgets.QTextEdit(self.centralwidget)
        self.text.setGeometry(QtCore.QRect(20, 20, 321, 431))
        self.text.setObjectName("text")
        self.list_notes_text = QtWidgets.QLabel(self.centralwidget)
        self.list_notes_text.setGeometry(QtCore.QRect(360, 0, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.list_notes_text.setFont(font)
        self.list_notes_text.setObjectName("list_notes_text")
        self.list_notes = QtWidgets.QListWidget(self.centralwidget)
        self.list_notes.setGeometry(QtCore.QRect(360, 30, 211, 121))
        self.list_notes.setObjectName("list_notes")
        self.btn_create = QtWidgets.QPushButton(self.centralwidget)
        self.btn_create.setGeometry(QtCore.QRect(360, 160, 101, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.btn_create.setFont(font)
        self.btn_create.setObjectName("btn_create")
        self.btn_del = QtWidgets.QPushButton(self.centralwidget)
        self.btn_del.setGeometry(QtCore.QRect(470, 160, 101, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.btn_del.setFont(font)
        self.btn_del.setObjectName("btn_del")
        self.btn_save = QtWidgets.QPushButton(self.centralwidget)
        self.btn_save.setGeometry(QtCore.QRect(360, 190, 211, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.btn_save.setFont(font)
        self.btn_save.setObjectName("btn_save")
        self.list_tags = QtWidgets.QListWidget(self.centralwidget)
        self.list_tags.setGeometry(QtCore.QRect(360, 230, 211, 121))
        self.list_tags.setObjectName("list_tags")
        self.list_tags_text = QtWidgets.QLabel(self.centralwidget)
        self.list_tags_text.setGeometry(QtCore.QRect(360, 200, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(10)
        self.list_tags_text.setFont(font)
        self.list_tags_text.setObjectName("list_tags_text")
        self.btn_add_tag = QtWidgets.QPushButton(self.centralwidget)
        self.btn_add_tag.setGeometry(QtCore.QRect(360, 390, 91, 21))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.btn_add_tag.setFont(font)
        self.btn_add_tag.setObjectName("btn_add_tag")
        self.btn_del_tag = QtWidgets.QPushButton(self.centralwidget)
        self.btn_del_tag.setGeometry(QtCore.QRect(460, 390, 111, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.btn_del_tag.setFont(font)
        self.btn_del_tag.setObjectName("btn_del_tag")
        self.pole = QtWidgets.QLineEdit(self.centralwidget)
        self.pole.setGeometry(QtCore.QRect(360, 360, 211, 20))
        self.pole.setObjectName("pole")
        self.btn_search = QtWidgets.QPushButton(self.centralwidget)
        self.btn_search.setGeometry(QtCore.QRect(360, 420, 211, 20))
        font = QtGui.QFont()
        font.setPointSize(8)
        self.btn_search.setFont(font)
        self.btn_search.setObjectName("btn_search")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 585, 18))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        self.list_notes.itemClicked.connect(self.show_note)
        self.btn_create.clicked.connect(self.add_note)
        self.btn_del.clicked.connect(self.del_note)
        self.btn_save.clicked.connect(self.save_note)
        self.btn_add_tag.clicked.connect(self.add_tag)
        self.btn_del_tag.clicked.connect(self.del_tag)
        self.btn_search.clicked.connect(self.search_tag)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.list_notes_text.setText(_translate("MainWindow", "Список заміток"))
        self.btn_create.setText(_translate("MainWindow", "Створити замітку"))
        self.btn_del.setText(_translate("MainWindow", "Видалити замітку"))
        self.btn_save.setText(_translate("MainWindow", "Зберегти замітку"))
        self.list_tags_text.setText(_translate("MainWindow", "Список тегів"))
        self.btn_add_tag.setText(_translate("MainWindow", "Додати до замітки"))
        self.btn_del_tag.setText(_translate("MainWindow", "Відкріпити від замітки"))
        self.btn_search.setText(_translate("MainWindow", "Шукати замітки по тегу"))

    def show_note(self):
        key = self.list_notes.selectedItems()[0].text()
        self.text.setText(notes[key]["текст"])
        self.list_tags.clear()
        self.list_tags.addItems(notes[key]["теги"])

    def add_note(self):
        name, ok = QtWidgets.QInputDialog.getText(self.centralwidget, "Додати замітку", "Назва замітки:")
        if name != "" and ok:
            notes[name] = {"текст": "", "теги": []}
            self.list_notes.addItem(name)

    def del_note(self):
        if self.list_notes.selectedItems():
            key = self.list_notes.selectedItems()[0].text()
            del notes[key]
            self.list_notes.clear()
            self.text.clear()
            self.list_tags.clear()
            self.list_notes.addItems(notes)

            with open("notes.json", "w", encoding="utf-8") as file:
                json.dump(notes, file, sort_keys=True, ensure_ascii=False)
        else:
            win = QtWidgets.QMessageBox()
            win.setText("Замітка для видаленя не вибрана!")
            win.exec()

    def save_note(self):
        if self.list_notes.selectedItems():
            key = self.list_notes.selectedItems()[0].text()
            notes[key]["текст"] = self.text.toPlainText()
            with open("notes.json", "w", encoding="utf-8") as file:
                json.dump(notes, file, sort_keys=True, ensure_ascii=False)
        else:
            win = QtWidgets.QMessageBox()
            win.setText("Замітка для збереження не вибрана!")
            win.exec()

    def add_tag(self):
        if self.list_notes.selectedItems():
            key = self.list_notes.selectedItems()[0].text()
            tag = self.pole.text()
            if not tag in notes[key]["теги"]:
                notes[key]["теги"].append(tag)
                self.list_tags.addItem(tag)
                self.pole.clear()
                with open("notes.json", "w", encoding="utf-8") as file:
                    json.dump(notes, file, sort_keys=True, ensure_ascii=False)
            else:
                win = QtWidgets.QMessageBox()
                win.setText("Замітка для додавання тегу не вибрана!")
                win.exec()

    def del_tag(self):
        if self.list_notes.selectedItems():
            key = self.list_notes.selectedItems()[0].text()
            tag = self.list_tags.selectedItems()[0].text()
            notes[key]["теги"].remove(tag)
            self.list_tags.clear()
            self.list_tags.addItems(notes[key]["теги"])
            with open("notes.json", "w", encoding="utf-8") as file:
                json.dump(notes, file, sort_keys=True, ensure_ascii=False)
        else:
            win = QtWidgets.QMessageBox()
            win.setText("Тег для видалення не обраний!")
            win.exec()

    def search_tag(self):
        tag = self.pole.text()
        if self.btn_search.text() == "Шукати замітки по тегу" and tag:
            notes_filter = {}
            for n in notes:
                if tag in notes[n]["теги"]:
                    notes_filter[n] = notes[n]
            self.btn_search.setText("Очистити")
            self.list_notes.clear()
            self.list_tags.clear()
            self.text.clear()
            self.list_notes.addItems(notes_filter)
        elif self.btn_search.text() == "Очистити":
            self.text.clear()
            self.list_notes.clear()
            self.list_tags.clear()
            self.list_notes.addItems(notes)
            self.btn_search.setText("Шукати замітки по тегу")

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()

    with open("notes.json", "r", encoding="utf-8") as file:
        notes = json.load(file)
    ui.list_notes.addItems(notes)


    sys.exit(app.exec_())
